fit2 <- glm(use ~ wind + magn, data=shuttle, family = "binomial")
summary(fit2)
odd = exp(coef(fit2)); odd
# Q3
fit3 <- glm(1 - use ~ wind + magn, data=shuttle, family = "binomial")
# Q3
fit3 <- glm(1 - as.integer(use) ~ wind + magn, data=shuttle, family = "binomial")
as.integer(use)
# Q3
fit3 <- glm(1 - as.integer(shuttle$use) ~ wind + magn, data=shuttle, family = "binomial")
as.integer(shuttle$use)
as.numeric(shuttle$use)
shuttle$use
library(MASS)
data("shuttle")
shuttle$use = factor(shuttle$use, levels = ("auto", "noauto"), labels=c("1", "0"))
shuttle$wind = relevel(shuttle$wind, ref = "head")
shuttle$use = factor(shuttle$use, levels = ("auto", "noauto"), labels=c("1", "0"))
library(MASS)
data("shuttle")
shuttle$use = factor(shuttle$use, levels = c("auto", "noauto"), labels=c("1", "0"))
shuttle$wind = relevel(shuttle$wind, ref = "head")
str(shuttle$use)
shuttle$use
# Q1
fit1 <- glm(use ~ wind, data = shuttle, family = "binomial")
summary(fit1)
# note that the link function is log(mu/(1-mu)) = log(odd)
odd = exp(coef(fit1)); odd
# Q2
fit2 <- glm(use ~ wind + magn, data=shuttle, family = "binomial")
summary(fit2)
odd = exp(coef(fit2)); odd
as.integer(shuttle$use)
shuttle$use
as.numeric(shuttle$use)
shuttle$use
str(shuttle$use)
library(MASS)
data("shuttle")
str(shuttle$use)
shuttle$use
shuttle$use
str(shuttle$use)
str(shuttle$use)[4:10]
str(shuttle$use)
shuttle$use = factor(shuttle$use, levels = c("auto", "noauto"), labels=c("5", "10"))
shuttle$use
library(MASS)
data("shuttle")
shuttle$use = factor(shuttle$use, levels = c("auto", "noauto"), labels=c("1", "0"))
shuttle$use
# Q1
fit1 <- glm(use ~ wind, data = shuttle, family = "binomial")
summary(fit1)
# note that the link function is log(mu/(1-mu)) = log(odd)
odd = exp(coef(fit1)); odd
# Q2
fit2 <- glm(use ~ wind + magn, data=shuttle, family = "binomial")
summary(fit2)
odd = exp(coef(fit2)); odd
as.character(shuttle$use)
shuttle$use
shuttle$use == 1
shuttle$use -1
shuttle$use == "1"
# Q3
shuttle$use3 <- ifelse(shuttle$use == "1", 1, 0)
fit3 <- glm(1 - use3 ~ wind + magn, data=shuttle, family = "binomial")
summary(fit3)
odd = exp(coef(fit2)); odd
shuttle$use3
# Q3
shuttle$use3 <- 1 - ifelse(shuttle$use == "1", 1, 0)
fit3 <- glm(1 - use3 ~ wind + magn, data=shuttle, family = "binomial")
summary(fit3)
shuttle$use
shuttle$use3
fit3 <- glm(1 - use3 ~ wind + magn, data=shuttle, family = "binomial")
summary(fit3)
shuttle$use3 <- factor(shuttle$use3, levels = c(0,1), labels = c(0, 1))
fit3 <- glm(1 - use3 ~ wind + magn, data=shuttle, family = "binomial")
fit3 <- glm(use3 ~ wind + magn, data=shuttle, family = "binomial")
summary(fit3)
# Q3
shuttle$use3 <- 1 - ifelse(shuttle$use == "1", 1, 0)
shuttle$use3 <- factor(shuttle$use3, levels = c(0,1), labels = c(0, 1))
fit3 <- glm(use3 ~ wind + magn, data=shuttle, family = "binomial")
summary(fit3)
library(MASS)
data("shuttle")
# Q3
shuttle$use3 <- 1 - ifelse(shuttle$use == "1", 1, 0)
shuttle$use3 <- factor(shuttle$use3, levels = c(0,1), labels = c(0, 1))
fit3 <- glm(use3 ~ wind + magn, data=shuttle, family = "binomial")
summary(fit3)
odd = exp(coef(fit2)); odd
data(InsectSprays)
head(InsectSprays)
fit4 <- glm(count~spray, data = InsectSprays,family = "poisson")
summary(fit4)
# Q4
data(InsectSprays)
InsectSprays$spray = relevel(InsectSprays$spray, ref = "B")
fit4 <- glm(count~spray, data = InsectSprays,family = "poisson")
summary(fit4)
InsectSprays$t <- seq(1:nrow(InsectSprays))
InsectSprays$t2 <- log(10) + InsectSprays$t
fit <- glm(count ~ spray + offset(t), data=InsectSprays, family=poisson)
fitT <- glm(count ~ spray + offset(t2), data=InsectSprays, family=poisson)
fit$coeff
fitT$coeff
InsectSprays$t <- seq(1:nrow(InsectSprays))
InsectSprays$t2 <- log(10) + InsectSprays$t
fit <- glm(count ~ spray + offset(t), data=InsectSprays, family=poisson)
# Q4
data(InsectSprays)
InsectSprays$t <- seq(1:nrow(InsectSprays))
InsectSprays$t2 <- log(10) + InsectSprays$t
fit <- glm(count ~ spray + offset(t), data=InsectSprays, family=poisson)
InsectSprays
fit <- glm(count ~ spray + offset(t), data=InsectSprays, family=poisson)
fitT <- glm(count ~ spray + offset(t2), data=InsectSprays, family=poisson)
fit$coeff
fitT$coeff
InsectSprays$t2 <- log(100) + InsectSprays$t
fit <- glm(count ~ spray + offset(t), data=InsectSprays, family=poisson)
fitT <- glm(count ~ spray + offset(t2), data=InsectSprays, family=poisson)
fit$coeff
fitT$coeff
# Q4
data(InsectSprays)
InsectSprays$spray = relevel(InsectSprays$spray, ref = "B")
fit4 <- glm(count~spray, data = InsectSprays,family = "poisson")
summary(fit4)
fit4 <- glm(count~spray-1, data = InsectSprays,family = "poisson")
summary(fit4)
# Q4
data(InsectSprays)
InsectSprays$spray = relevel(InsectSprays$spray, ref = "B")
fit4 <- glm(count~spray, data = InsectSprays,family = "poisson")
summary(fit4)
data("mtcars")
mtcars
help("mtcars")
help("mtcars", help_type = "text")
help("mtcars", help_type = "text")
print(help("mtcars", help_type = "text"))
print(help("mtcars", help_type = "html"))
knitr::opts_chunk$set(echo = TRUE)
df <- data.frame(transmission=mtcars$am,
mpg=mtcars$mpg)
head(df)
# convert transmission to a factor variable and explicitly specify reference level
df$transmission <- factor(df$transmission, levels = c(0,1), labels = c(0,1))
head(df)
128-3
(128-3)/2
(128-3)/1
(128-3)/1 + 1
# set pseudorandom number generator
set.seed(10)
# attach packages
library(tidyverse)
library(kernlab)
library(e1071)
library(ISLR) # contains example data set "Khan"
library(RColorBrewer) # customized coloring of plots
# generate 40 random observations and assign them to two classes
x <- matrix(rnorm(20*2), ncol = 2)
y <- c(rep(-1, 10), rep(1, 10))
x[y==1,] <- x[y==1] + 3/2
x
dat <- data.frame(x=x, y=as.factor(y))
dat
# plot data
ggplot(data=dat, mapping = aes(x=x.1, y=x.2, color=y, shape=y)) +
geom_point(size=2)
# plot data
ggplot(data=dat, mapping = aes(x=x.1, y=x.2, color=y, shape=y)) +
geom_point(size=2) +
scale_color_manual(values = c("black", "red"))
# plot data
ggplot(data=dat, mapping = aes(x=x.1, y=x.2, color=y, shape=y)) +
geom_point(size=2) +
scale_color_manual(values = c("black", "red")) +
theme(legend.position = "none")
# set pseudorandom number generator
set.seed(10)
# attach packages
library(tidyverse)
library(kernlab)
library(e1071)
library(ISLR) # contains example data set "Khan"
library(RColorBrewer) # customized coloring of plots
# generate 40 random observations and assign them to two classes
x <- matrix(rnorm(20*2), ncol = 2)
y <- c(rep(-1, 10), rep(1, 10))
x[y==1,] <- x[y==1] + 3/2
dat <- data.frame(x=x, y=as.factor(y))
dat
# plot data
ggplot(data=dat, mapping = aes(x=x.1, y=x.2, color=y, shape=y)) +
geom_point(size=2) +
scale_color_manual(values = c("black", "red")) +
theme(legend.position = "none")
# fit support vector machine model
svmfit <- smv(y~., data = dat, kernel="linear", scale=FALSE)
# fit support vector machine model
svmfit <- svm(y~., data = dat, kernel="linear", scale=FALSE)
plot(svmfit)
# fit support vector machine model
svmfit <- svm(y~., data = dat, kernel="linear", scale=FALSE)
plot(svmfit, dat)
# fit model and produce plot with kernlab package
kernfit <- ksvm(x, y, type = "C-svc", kernel = "vanilladot")
plot(kernfit, dat = x)
# cases when data points are not linearly saparetable
x <- matrix(rnorm(20*2), ncol = 2)
y <- c(rep(-1, 10), rep(1, 10))
x[y==1, ] <- x[y==1, ] + 1
dat <- data.frame(x=x, y=as.factor(y))
# plot data set
ggplot(data = dat, mapping = aes(x=x.1, y=x.2, color=y, shape=y)) +
geom_point(size=2) +
scale_color_manual(values = c("black", "red")) +
theme(legend.position = "none")
kernfit <- ksvm(x, y, type = "C-svc", kernel = "vanilladot", C = 100)
plot(kernfit, data = x)
?svm
?tune
# tune model with e1071 packages
tune.out <- tune(smv, y~., data = dat, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
# tune model with e1071 packages
tune.out <- tune(svm, y~., data = dat, kernel = "linear",
ranges = list(cost = c(0.001, 0.01, 0.1, 1, 5, 10, 100)))
bestmod <- tune.out$best.model
bestmod
# create a table of misclassified observations
ypred <- predict(bestmod, dat)
(misclass <- table(predict = ypred, truth = dat$y))
# construct larger random data set
x <- matrix(rnorm(200*2), ncol = 2)
rep(1:2, 10)
rep(1:2, each=10)
x <- x + rep(c(2.5, -2.5), each=100)
y <- c(rep(1, 150), rep(2, 50))
dat <- data.frame(x=x, y=as.factor(y))
# plot data
ggplot(data = dat, mapping = aes(x=x.2, y=x.1, color=y, shape=y)) +
geom_point(size=2)+
scale_color_manual(values = c("black", "red")) +
theme(legend.position = "none")
rep(c(2.5, -2.5), each=100)
rep(c(2.5, -2.5), each=c(100, 50))
# construct larger random data set
x <- matrix(rnorm(200*2), ncol = 2)
x[1:150, ] <- x[1:150, ] + c(rep(2.5, 100), rep(-2.5, 50))
y <- c(rep(1, 150), rep(2, 50))
dat <- data.frame(x=x, y=as.factor(y))
# plot data
ggplot(data = dat, mapping = aes(x=x.2, y=x.1, color=y, shape=y)) +
geom_point(size=2)+
scale_color_manual(values = c("black", "red")) +
theme(legend.position = "none")
sample(200, 100)
set.seed(123)
train <- base::sample(200,100, replace = FALSE)
svmfit <- svm(y~., data = dat[train, ], kernel = "radial", gamma = 1, cost = 1)
# plot classifier
plot(svmfit, dat)
# Fit radial-based SVM in kernlab
kernfit <- ksvm(x[train,],y[train], type = "C-svc", kernel = 'rbfdot', C = 1, scaled = c())
# Plot training data
plot(kernfit, data = x[train,])
c()
?ksvm
# Fit radial-based SVM in kernlab
kernfit <- ksvm(x[train,],y[train], type = "C-svc", kernel = 'rbfdot', C = 1, scaled = FALSE)
# Plot training data
plot(kernfit, data = x[train,])
# Plot training data
plot(kernfit, data = x[train,])
# Fit radial-based SVM in kernlab
kernfit <- ksvm(x[train,],y[train], type = "C-svc", kernel = 'rbfdot', C = 1, scaled = c())
# Plot training data
plot(kernfit, data = x[train,])
# tune model to find optimal cost, gamma values
tune.out <- tune(svm, y~., data = dat[train, ], kernel="radial",
ranges = list(
cost = c(0.1,1,10,100,1000),
gamma = c(0.5,1,2,3,4)
))
# show best model
tune.out$best.model
# evaluate model performance
valid <- table(true=dat[-train, "y"], pred=predict(tune.out$best.model, newx=dat[-1train, ]))
# evaluate model performance
valid <- table(true=dat[-train, "y"], pred=predict(tune.out$best.model, newx=dat[-train, ]))
valid
# tune model to find optimal cost, gamma values
tune.out <- tune(svm, y~., data = dat[train, ], kernel="radial",
ranges = list(
cost = c(0.1,1,10,100,1000),
gamma = c(0.5,1,2,3,4)
))
# show best model
tune.out$best.model
# evaluate model performance
valid <- table(true=dat[-train, "y"], pred=predict(tune.out$best.model, newx=dat[-train, ]))
valid
# SVMs for multiple classes
# construct data set
x <- rbind(x, matrix(rnorm(50*2), ncol = 2))
y <- c(y, rep(0,50))
x[y==0,2] <- x[y==0,2] + 2.5
dat <- data.frame(x=x, y=as.factor(y))
# plot data set
ggplot(data = dat, aes(x = x.2, y = x.1, color = y, shape = y)) +
geom_point(size = 2) +
scale_color_manual(values=c("#000000","#FF0000","#00BA00")) +
theme(legend.position = "none")
# fit model
svmfit <- svm(y~., data=dat, kernel = "radial", cost=10, gamma=1)
# plot results
plot(svmfit, dat)
?svm
svmfit
summary(svmfit)
names(svmfit)
svmfit$cost
svmfit$SV
names(svmfit)
svmfit$coefs
svmfit$y.scale
svmfit$scaled
svmfit$x.scale
svmfit$fitted
?svm.default
names(svmfit)
svmfit$decision.values
svmfit$SV
dim(x)
svmfit$index
dim(svmfit$index)
length(svmfit$index)
library(caret)
?train
library(dplyr)
library(plyr)
apply(mtcars,1, max)
51*8*5
51*8*5*4
51*8*5*4*12
51*8*5*52
24000/52
24000/52/40
runif(100)
runif(100)
runif(100)
corr(runif(100), runif(100))
cor(runif(100), runif(100))
cor(runif(100), runif(100))
cor(runif(100), runif(100))
cor(runif(100), runif(100))
cor(runif(100), runif(100))
cor(runif(100), runif(100))
cor(runif(100), runif(100))
cor(runif(100), runif(100))
cor(runif(100), runif(100))
cor(runif(100), runif(100))
cor(runif(100), runif(100))
cor(runif(100), runif(100))
cor(runif(100), runif(100))
x <-  sample(c(-1, 0, 1), 100, replace = TRUE, prob=1/3)
x <-  sample(c(-1, 0, 1), 100, replace = TRUE, prob=c(1/3, 1/3, 1/3))
y <-  sample(c(-1, 0, 1), 100, replace = TRUE, prob=c(1/3, 1/3, 1/3))
cor(x, y)
cor(sample(c(-1, 0, 1), 100, replace = TRUE, prob=c(1/3, 1/3, 1/3)), sample(c(-1, 0, 1), 100, replace = TRUE, prob=c(1/3, 1/3, 1/3)))
cor(sample(c(-1, 0, 1), 100, replace = TRUE, prob=c(1/3, 1/3, 1/3)), sample(c(-1, 0, 1), 100, replace = TRUE, prob=c(1/3, 1/3, 1/3)))
cor(sample(c(-1, 0, 1), 100, replace = TRUE, prob=c(1/3, 1/3, 1/3)), sample(c(-1, 0, 1), 100, replace = TRUE, prob=c(1/3, 1/3, 1/3)))
cor(sample(c(-1, 0, 1), 100, replace = TRUE, prob=c(1/3, 1/3, 1/3)), sample(c(-1, 0, 1), 100, replace = TRUE, prob=c(1/3, 1/3, 1/3)))
cor(sample(c(-1, 0, 1), 100, replace = TRUE, prob=c(1/3, 1/3, 1/3)), sample(c(-1, 0, 1), 100, replace = TRUE, prob=c(1/3, 1/3, 1/3)))
cor(sample(c(-1, 0, 1), 100, replace = TRUE, prob=c(1/3, 1/3, 1/3)), sample(c(-1, 0, 1), 100, replace = TRUE, prob=c(1/3, 1/3, 1/3)))
cor(sample(c(-1, 0, 1), 100, replace = TRUE, prob=c(1/3, 1/3, 1/3)), sample(c(-1, 0, 1), 100, replace = TRUE, prob=c(1/3, 1/3, 1/3)))
x
y
cov(x,y)
cov(x,y)/sqrt(var(x)*var(y))
cor(x,y)
(mean(x*y) - mean(x)*mean(y))/sqrt((mean(x^2)-mean(x)^2)*(mean(y^2)-mean(y)^2)  )
(var(x)-var(y)-mean(x*y))/sqrt((mean(x^2)-mean(x)^2)*(mean(y^2)-mean(y)^2)  )
xy = x*y
xy
xy == 1
sum(xy == 1)
sum(xy == 1) - sum(xy== -1)
(sum(xy == 1) - sum(xy== -1))/100/sqrt((mean(x^2)-mean(x)^2)*(mean(y^2)-mean(y)^2)  )
(sum(xy == 1) - sum(xy== -1))/100/sqrt((mean(x^2)-mean(x)^2)*(mean(y^2)-mean(y)^2)  )
(sum(xy == 1) - sum(xy== -1))/100/sqrt((mean(x^2)-mean(x)^2)*(mean(y^2)-mean(y)^2)  )
X = c(0,1,-1,-1,-1)
Y = c(0,-1,1,1,0)
cor(X, Y)
?cor
cor(X, Y, method = 'pearson')
plot(X,Y)
cor(sample(-1:1))
sample(-1:1)
sample(-1:1)
sample(-1:1)
sample(-1:1)
cor(sample(-1:1,size = 5, replace = TRUE), sample(-1:1,size = 5, replace = TRUE))
cor(sample(-1:1,size = 5, replace = TRUE), sample(-1:1,size = 5, replace = TRUE))
cor(sample(-1:1,size = 5, replace = TRUE), sample(-1:1,size = 5, replace = TRUE))
cor(sample(-1:1,size = 5, replace = TRUE), sample(-1:1,size = 5, replace = TRUE))
cor(sample(-1:1,size = 5, replace = TRUE), sample(-1:1,size = 5, replace = TRUE))
cor(sample(-1:1,size = 5, replace = TRUE), sample(-1:1,size = 5, replace = TRUE))
cor(sample(-1:1,size = 5, replace = TRUE), sample(-1:1,size = 5, replace = TRUE))
cor(sample(-1:1,size = 5, replace = TRUE), sample(-1:1,size = 5, replace = TRUE))
cor(sample(-1:1,size = 5, replace = TRUE), sample(-1:1,size = 5, replace = TRUE))
cor(sample(-1:1,size = 5, replace = TRUE), sample(-1:1,size = 5, replace = TRUE))
cor(sample(-1:1,size = 5, replace = TRUE), sample(-1:1,size = 5, replace = TRUE))
cor(sample(-1:1,size = 5, replace = TRUE), sample(-1:1,size = 5, replace = TRUE))
cor(sample(-1:1,size = 5, replace = TRUE), sample(-1:1,size = 5, replace = TRUE))
cor(sample(-1:1,size = 5, replace = TRUE), sample(-1:1,size = 5, replace = TRUE))
cor(sample(-1:1,size = 5, replace = TRUE), sample(-1:1,size = 5, replace = TRUE))
cor(sample(-1:1,size = 5, replace = TRUE), sample(-1:1,size = 5, replace = TRUE))
cor(sample(-1:1,size = 5, replace = TRUE, prob = c(1/3, 1/3, 1/3)),
sample(-1:1,size = 5, replace = TRUE), prob = c(1/3, 1/3, 1/3))
cor(sample(-1:1,size = 5, replace = TRUE, prob = c(1/3, 1/3, 1/3)),
sample(-1:1,size = 5, replace = TRUE, prob = c(1/3, 1/3, 1/3)))
cor(sample(-1:1,size = 5, replace = TRUE, prob = c(1/3, 1/3, 1/3)),
sample(-1:1,size = 5, replace = TRUE, prob = c(1/3, 1/3, 1/3)))
cor(sample(-1:1,size = 5, replace = TRUE, prob = c(1/3, 1/3, 1/3)),
sample(-1:1,size = 5, replace = TRUE, prob = c(1/3, 1/3, 1/3)))
R = numeric(length = 10000)
for (1 in 1:length(R)) {
R[i] = cor(sample(-1:1,size = 5, replace = TRUE, prob = c(1/3, 1/3, 1/3)),
sample(-1:1,size = 5, replace = TRUE, prob = c(1/3, 1/3, 1/3)))
}
for (i in 1:length(R)) {
R[i] = cor(sample(-1:1,size = 5, replace = TRUE, prob = c(1/3, 1/3, 1/3)),
sample(-1:1,size = 5, replace = TRUE, prob = c(1/3, 1/3, 1/3)))
}
warnings()
R
abs(R) > 0.868599
sum(abs(R) > 0.868599)
sum(abs(R) > 0.868599, na.rm = TRUE)
sum(abs(R) > 0.868599, na.rm = TRUE)/10000
sum(abs(R) > 0.868599, na.rm = TRUE)/10000
R = numeric(length = 100000)
R = numeric(length = 100000)
for (i in 1:length(R)) {
R[i] = cor(sample(-1:1,size = 5, replace = TRUE, prob = c(1/3, 1/3, 1/3)),
sample(-1:1,size = 5, replace = TRUE, prob = c(1/3, 1/3, 1/3)))
}
sum(abs(R) > 0.868599, na.rm = TRUE)/length(R)
sum(abs(R) > 0.868599, na.rm = TRUE)/10000
R = numeric(length = 1000000)
for (i in 1:length(R)) {
R[i] = cor(sample(-1:1,size = 5, replace = TRUE, prob = c(1/3, 1/3, 1/3)),
sample(-1:1,size = 5, replace = TRUE, prob = c(1/3, 1/3, 1/3)))
}
sum(abs(R) > 0.868599, na.rm = TRUE)/length(R)
warnings()
34015/250
34015/340
library("tm")
library("RTextTools")
install.packages('tm')
install.packages('RTextTools')
?t
data = read.csv("/Users/surya/Documents/CBA_ISB/TA/Group Assignment 2/Tweets Classification_Training.csv",stringsAsFactors = F)
setwd("~/workstation/practice-practice-practice")
library(sparkR)
install.packages('sparkR')
install.packages('SparkR')
install.packages('SparkR')
install.packages("sparklyr")
library(sparklyr)
install.packages("sparklyr")
spark_install(version = "2.3.0")
install.packages("sparklyr")
library(sparklyr)
?spark_install
spark_install()
install.packages('forecast')
install.packages('fpp2')
library(forecast)
library(fpp2)
AirPassengers
str(AirPassengers)
autoplot(AirPassengers)
head(arrivals)
autoplot(arrivals)
autoplot(arrivals, facets = TRUE)
autoplot(arrivals, facets = TRUE) +
geom_smooth() +
labs("International arrivals to Australia",
y = "Arrivals (in thousands)",
x = NULL)
autoplot(arrivals, facets = TRUE) +
geom_smooth() +
labs(title="International arrivals to Australia",
y = "Arrivals (in thousands)",
x = NULL)
japan <- arrivals[, "Japan"]
summary(japan)
japan
autoplot(fpp2::qcement)
